/*
* Software:  PoCA: Point Cloud Analyst
*
* File:      Palette.cpp
*
* Copyright: Florian Levet (2020-2025)
*
* License:   LGPL v3
*
* Homepage:  https://github.com/flevet/PoCA
*
* PoCA is a free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* The algorithms that underlie PoCA have required considerable
* development. They are described in the original SR-Tesseler paper,
* doi:10.1038/nmeth.3579. If you use PoCA as part of work (visualization,
* manipulation, quantification) towards a scientific publication, please include
* a citation to the original paper.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program; if not, write to the Free Software Foundation,
* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

/*Copyright (c) 2010 Maxime Petitjean

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.*/

#include <assert.h>
#include <time.h>

#include "../General/Palette.hpp"
#include "../General/Misc.h"

namespace poca::core {

	uint32_t Palette::m_seedRand = 20;

	Palette::Palette()
	{

	}

	Palette::Palette(const std::vector<unsigned char>& _rs, const std::vector<unsigned char>& _gs, const std::vector<unsigned char>& _bs, const std::string& _name, const bool _hilow) : m_name(_name), m_hilow(_hilow)
	{
		float position = 0.f, step = 1.f / (float)(_rs.size() - 1);
		for (auto n = 0; n < _rs.size(); n++) {
			m_gradient.insert(std::make_pair(position, Color4uc(_rs[n], _gs[n], _bs[n], 255)));
			position += step;
		}
		m_begin = 0.; m_end = 1.;
		m_from = 0; m_to = 256;
	}

	Palette::Palette(const Color4uc _color_begin, const Color4uc _color_end, const std::string& _name, const bool _hilow) : m_name(_name), m_hilow(_hilow)
	{
		m_gradient.insert(std::make_pair(0.f, _color_begin));
		m_gradient.insert(std::make_pair(1.f, _color_end));
		m_begin = 0.; m_end = 1.;
		m_from = 0; m_to = 256;
	}

	Palette::Palette(const Palette& _o) :m_gradient(_o.m_gradient), m_from(_o.m_from), m_to(_o.m_to), m_begin(_o.m_begin), m_end(_o.m_end), m_name(_o.m_name), m_autoscale(_o.m_autoscale), m_hilow(_o.m_hilow), m_filterMin(_o.m_filterMin), m_filterMax(_o.m_filterMax)
	{
	}

	void Palette::setPalette(PaletteInterface* _pal)
	{
		Palette* palette = dynamic_cast<Palette*>(_pal);
		if (palette == NULL)
			return;
		setPalette(*palette);
	}

	void Palette::setPalette(const Palette& _o)
	{
		m_gradient = _o.m_gradient;
		m_name = _o.m_name;
		m_begin = _o.m_begin;
		m_end = _o.m_end;
		m_from = _o.m_from;
		m_to = _o.m_to;
		m_autoscale = _o.m_autoscale;
		m_hilow = _o.m_hilow;
		m_filterMin = _o.m_filterMin;
		m_filterMax = _o.m_filterMax;
	}

	std::set <std::pair<float, Color4uc>>::iterator Palette::getElement(unsigned int _index)
	{
		assert(_index < (unsigned int)m_gradient.size());
		std::set <std::pair<float, Color4uc>>::iterator it = m_gradient.begin();
		for (unsigned int n = 0; n < _index; n++) it++;
		return it;
	}

	std::set <std::pair<float, Color4uc>>::const_iterator Palette::getElement(unsigned int _index) const
	{
		assert(_index < (unsigned int)m_gradient.size());
		std::set <std::pair<float, Color4uc>>::const_iterator it = m_gradient.begin();
		for (unsigned int n = 0; n < _index; n++) it++;
		return it;
	}

	void Palette::setColor(float _position, Color4uc _color)
	{
		assert(_position >= 0.0 && _position <= 1.0);
		m_gradient.insert(std::make_pair(_position, _color));
	}

	void Palette::removeColorAt(unsigned int _index)
	{
		std::set <std::pair<float, Color4uc>>::iterator it = getElement(_index);
		m_gradient.erase(it);
	}

	Color4uc Palette::colorAt(unsigned int _index) const
	{
		std::set <std::pair<float, Color4uc>>::const_iterator it = getElement(_index);
		return it->second;
	}


	void Palette::setColorAt(unsigned int _index, Color4uc _color)
	{
		std::set <std::pair<float, Color4uc>>::iterator it = getElement(_index);
		float pos = it->first;
		m_gradient.erase(it);
		m_gradient.insert(std::make_pair(pos, _color));
	}

	float Palette::colorPosition(unsigned int _index) const
	{
		std::set <std::pair<float, Color4uc>>::const_iterator it = getElement(_index);
		return it->first;
	}

	void Palette::setColorPosition(unsigned int _index, float _position)
	{
		std::set <std::pair<float, Color4uc>>::iterator it = getElement(_index);
		Color4uc color = it->second;
		m_gradient.erase(it);
		m_gradient.insert(std::pair(_position, color));
	}

	void Palette::getGradientInfos(std::vector <float>& _pos, std::vector <Color4uc>& _colors) const
	{
		for (std::set <std::pair<float, Color4uc>>::const_iterator it = m_gradient.begin(); it != m_gradient.end(); it++) {
			_pos.push_back(it->first);
			_colors.push_back(it->second);
		}
	}

	Palette Palette::getStaticLut(const std::string& _lut)
	{
		if (_lut == std::string("Gray")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 255, 255, 255), _lut);
		}
		else if (_lut == std::string("Red")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 0, 0, 255), _lut);
		}
		else if (_lut == std::string("Green")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 255, 0, 255), _lut);
		}
		else if (_lut == std::string("Blue")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 0, 255, 255), _lut);
		}
		else if (_lut == std::string("AllGray")) {
			return Palette(Color4uc(125, 125, 125, 255), Color4uc(125, 125, 125, 255), _lut);
		}
		else if (_lut == std::string("AllYellow")) {
			return Palette(Color4uc(255, 255, 0, 255), Color4uc(255, 255, 0, 255), _lut);
		}
		else if (_lut == std::string("AllRedColorBlind")) {
			return Palette(Color4uc(128, 0, 128, 255), Color4uc(128, 0, 128, 255), _lut);
		}
		else if (_lut == std::string("AllGreenColorBlind")) {
			return Palette(Color4uc(0, 200, 0, 255), Color4uc(0, 200, 0, 255), _lut);
		}
		else if (_lut == std::string("Fire")) {
			int r[] = { 0,0,1,25,49,73,98,122,146,162,173,184,195,207,217,229,240,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255 };
			int g[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,14,35,57,79,101,117,133,147,161,175,190,205,219,234,248,255,255,255,255 };
			int b[] = { 0,61,96,130,165,192,220,227,210,181,151,122,93,64,35,5,0,0,0,0,0,0,0,0,0,0,0,35,98,160,223,255 };
			int w = 32;
			std::vector < Color4uc > colors;
			for (int i = 1; i < w - 1; i++)
				colors.push_back(Color4uc(r[i], g[i], b[i], 255));
			Palette palette(Color4uc(0, 0, 0, 255), Color4uc(255, 255, 255, 255), _lut);
			float step = 1.f / 32.f;
			float cur = step;
			for (unsigned int i = 0; i < colors.size(); i++, cur += step)
				palette.setColor(cur, colors[i]);
			return palette;
		}
		else if (_lut == std::string("InvFire")) {
			int r[] = { 0,0,1,25,49,73,98,122,146,162,173,184,195,207,217,229,240,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255 };
			int g[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,14,35,57,79,101,117,133,147,161,175,190,205,219,234,248,255,255,255,255 };
			int b[] = { 0,61,96,130,165,192,220,227,210,181,151,122,93,64,35,5,0,0,0,0,0,0,0,0,0,0,0,35,98,160,223,255 };
			int w = 32;
			std::vector < Color4uc > colors;
			for (int i = w - 2; i >= 0; i--)
				colors.push_back(Color4uc(r[i], g[i], b[i], 255));
			Palette palette(Color4uc(255, 255, 255, 255), Color4uc(0, 0, 0, 255), _lut);
			float step = 1.f / 32.f;
			float cur = step;
			for (unsigned int i = 0; i < colors.size(); i++, cur += step)
				palette.setColor(cur, colors[i]);
			return palette;
		}
		else if (_lut == std::string("Ice")) {
			int r[] = { 0,0,0,0,0,0,19,29,50,48,79,112,134,158,186,201,217,229,242,250,250,250,250,251,250,250,250,250,251,251,243,230 };
			int g[] = { 156,165,176,184,190,196,193,184,171,162,146,125,107,93,81,87,92,97,95,93,93,90,85,69,64,54,47,35,19,0,4,0 };
			int b[] = { 140,147,158,166,170,176,209,220,234,225,236,246,250,251,250,250,245,230,230,222,202,180,163,142,123,114,106,94,84,64,26,27 };
			int w = 32;
			std::vector < Color4uc > colors;
			for (int i = 1; i < w - 1; i++)
				colors.push_back(Color4uc(r[i], g[i], b[i], 255));
			Palette palette(Color4uc(0, 0, 0, 255), Color4uc(255, 255, 255, 255), _lut);
			float step = 1.f / 32.f;
			float cur = step;
			for (unsigned int i = 0; i < colors.size(); i++, cur += step)
				palette.setColor(cur, colors[i]);
			return palette;
		}
		else if (_lut == std::string("Blue2Scale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 85, 255, 255), _lut);
		}
		else if (_lut == std::string("Green2Scale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 170, 127, 255), _lut);
		}
		else if (_lut == std::string("RedScale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 0, 0, 255), _lut);
		}
		else if (_lut == std::string("OrangeScale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 165, 0, 255), _lut);
		}
		else if (_lut == std::string("TomatoScale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 69, 0, 255), _lut);
		}
		else if (_lut == std::string("CyanScale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 255, 255, 255), _lut);
		}
		else if (_lut == std::string("TurquoiseScale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(64, 224, 208, 255), _lut);
		}
		else if (_lut == std::string("AllRedColorBlindScale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(128, 0, 128, 255), _lut);
		}
		else if (_lut == std::string("AllGreenColorBlindScale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 200, 0, 255), _lut);
		}
		else if (_lut == std::string("AllBlue")) {
			return Palette(Color4uc(0, 85, 255, 255), Color4uc(0, 85, 255, 255), _lut);
		}
		else if (_lut == std::string("AllGreen")) {
			return Palette(Color4uc(0, 170, 127, 255), Color4uc(0, 170, 127, 255), _lut);
		}
		else if (_lut == std::string("AllRed")) {
			return Palette(Color4uc(255, 0, 0, 255), Color4uc(255, 0, 0, 255), _lut);
		}
		else if (_lut == std::string("AllOrange")) {
			return Palette(Color4uc(255, 165, 0, 255), Color4uc(255, 165, 0, 255), _lut);
		}
		else if (_lut == std::string("AllTomato")) {
			return Palette(Color4uc(255, 69, 0, 255), Color4uc(255, 69, 0, 255), _lut);
		}
		else if (_lut == std::string("AllCyan")) {
			return Palette(Color4uc(0, 255, 255, 255), Color4uc(0, 255, 255, 255), _lut);
		}
		else if (_lut == std::string("AllTurquoise")) {
			return Palette(Color4uc(64, 224, 208, 255), Color4uc(64, 224, 208, 255), _lut);
		}
		else if (_lut == std::string("AllWhite")) {
			return Palette(Color4uc(255, 255, 255, 255), Color4uc(255, 255, 255, 255), _lut);
		}
		else if (_lut == std::string("AllBlack")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 0, 0, 255), _lut);
		}
		else if (_lut == std::string("HotCold")) {
			Palette palette(Color4uc(0, 0, 255, 255), Color4uc(170, 0, 255, 255), _lut);
			palette.setColor(0.1f, Color4uc(0, 170, 255, 255));
			palette.setColor(0.225f, Color4uc(103, 255, 139, 255));
			palette.setColor(0.35f, Color4uc(255, 255, 0, 255));
			palette.setColor(0.5f, Color4uc(255, 170, 0, 255));
			palette.setColor(0.7f, Color4uc(255, 0, 0, 255));
			return palette;
		}
		else if (_lut == std::string("HotCold2")) {
			Palette palette(Color4uc(0, 0, 255, 255), Color4uc(170, 0, 255, 255), _lut);
			palette.setColor(0.16f, Color4uc(0, 170, 255, 255));
			palette.setColor(0.33f, Color4uc(103, 255, 139, 255));
			palette.setColor(0.49f, Color4uc(255, 255, 0, 255));
			palette.setColor(0.66f, Color4uc(255, 170, 0, 255));
			palette.setColor(0.82f, Color4uc(255, 0, 0, 255));
			return palette;
		}
		else if (_lut == std::string("HiLow")) {
			Palette palette(Color4uc(128, 0, 128, 255), Color4uc(0, 200, 0, 255), _lut, true);
			palette.setColor(0.499, Color4uc(128, 0, 128, 255));
			palette.setColor(0.501, Color4uc(0, 200, 0, 255));
			return palette;
		}
		else if (_lut == std::string("Heatmap")) {
			Palette palette(Color4uc(33, 102, 172, 0), Color4uc(178, 24, 43, 255), _lut);
			palette.setColor(0.2f, Color4uc(103, 169, 207, 255));
			palette.setColor(0.4f, Color4uc(209, 229, 240, 255));
			palette.setColor(0.6f, Color4uc(253, 219, 199, 255));
			palette.setColor(0.8f, Color4uc(239, 138, 98, 255));
			return palette;
		}
		else if (_lut == std::string("HiLo")) {
			Palette palette(Color4uc(128, 0, 128, 255), Color4uc(0, 200, 0, 255), _lut);
			palette.setHiLow(true);
			return palette;
		}
		else if (_lut == std::string("Random")) {
			srand(m_seedRand);
			Palette palette(randomColorB(), randomColorB(), _lut);
			float step = 0.0001f;
			for (float cur = step; cur < 1.f; cur += step)
				palette.setColor(cur, randomColorB());
			m_seedRand = time(NULL);
			return palette;
		}
		else if (_lut == std::string("LightGrayscale")) {
			return Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 255, 255, 255), _lut);
		}
		else if (_lut == std::string("DarkGrayscale")) {
			return Palette(Color4uc(255, 255, 255, 255), Color4uc(0, 0, 0, 255), _lut);
		}
		else if (_lut == std::string("3color-BMR")) {
			std::vector<unsigned char> rs{ 0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255 };
			std::vector<unsigned char> gs{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			std::vector<unsigned char> bs{};
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("3color-CGY")) {
			std::vector<unsigned char> rs{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255 };
			std::vector<unsigned char> gs{};
			std::vector<unsigned char> bs{ 255, 253, 251, 249, 247, 245, 243, 241, 239, 237, 235, 233, 231, 229, 227, 225, 223, 221, 219, 217, 215, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 193, 191, 189, 187, 185, 183, 181, 179, 177, 175, 173, 171, 169, 167, 165, 163, 161, 159, 157, 155, 153, 151, 149, 147, 145, 143, 141, 139, 137, 135, 133, 131, 129, 127, 125, 123, 121, 119, 117, 115, 113, 111, 109, 107, 105, 103, 101, 99, 97, 95, 93, 91, 89, 87, 85, 83, 81, 79, 77, 75, 73, 71, 69, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 39, 37, 35, 33, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("BOP blue")) {
			std::vector<unsigned char> rs{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 32 };
			std::vector<unsigned char> gs{ 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20, 21, 22, 22, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 30, 31, 31, 32, 33, 33, 34, 35, 35, 36, 37, 37, 38, 39, 39, 40, 41, 41, 42, 43, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 50, 51, 52, 52, 53, 54, 54, 55, 56, 56, 57, 58, 58, 59, 60, 60, 61, 62, 62, 63, 64, 64, 65, 66, 66, 67, 68, 68, 69, 70, 70, 71, 72, 72, 73, 74, 75, 75, 76, 77, 77, 78, 79, 79, 80, 81, 81, 82, 83, 83, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 91, 91, 92, 93, 93, 94, 95, 95, 96, 97, 97, 98, 99, 100, 100, 101, 102, 102, 103, 104, 104, 105, 106, 106, 107, 108, 108, 109, 110, 110, 111, 112, 112, 113, 114, 114, 115, 116, 116, 117, 118, 118, 119, 120, 120, 121, 122, 122, 123, 124, 125, 125, 126, 127, 127, 128, 129, 129, 130, 131, 131, 132, 133, 133, 134, 135, 135, 136, 137, 137, 138, 139, 139, 140, 141, 141, 142, 143, 143, 144, 145, 145, 146, 147, 147, 148, 149, 150, 150, 151, 152, 152, 153, 154, 154, 155, 156, 156, 157, 158, 158, 159, 160, 160, 161, 162, 162, 163, 164, 164, 165, 166, 166, 167, 168, 168, 169, 170, 170, 171, 173 };
			std::vector<unsigned char> bs{ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("BOP orange")) {
			std::vector<unsigned char> rs{ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248 };
			std::vector<unsigned char> gs{ 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20, 21, 22, 22, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 30, 31, 31, 32, 33, 33, 34, 35, 35, 36, 37, 37, 38, 39, 39, 40, 41, 41, 42, 43, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 50, 51, 52, 52, 53, 54, 54, 55, 56, 56, 57, 58, 58, 59, 60, 60, 61, 62, 62, 63, 64, 64, 65, 66, 66, 67, 68, 68, 69, 70, 70, 71, 72, 72, 73, 74, 75, 75, 76, 77, 77, 78, 79, 79, 80, 81, 81, 82, 83, 83, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 91, 91, 92, 93, 93, 94, 95, 95, 96, 97, 97, 98, 99, 100, 100, 101, 102, 102, 103, 104, 104, 105, 106, 106, 107, 108, 108, 109, 110, 110, 111, 112, 112, 113, 114, 114, 115, 116, 116, 117, 118, 118, 119, 120, 120, 121, 122, 122, 123, 124, 125, 125, 126, 127, 127, 128, 129, 129, 130, 131, 131, 132, 133, 133, 134, 135, 135, 136, 137, 137, 138, 139, 139, 140, 141, 141, 142, 143, 143, 144, 145, 145, 146, 147, 147, 148, 149, 150, 150, 151, 152, 152, 153, 154, 154, 155, 156, 156, 157, 158, 158, 159, 160, 160, 161, 162, 162, 163, 164, 164, 165, 166, 166, 167, 168, 168, 169, 170, 170, 171, 173 };
			std::vector<unsigned char> bs{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 32 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("BOP purple")) {
			std::vector<unsigned char> rs{ 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 28, 28, 29, 30, 30, 31, 31, 32, 32, 33, 34, 34, 35, 35, 36, 37, 37, 38, 38, 39, 39, 40, 41, 41, 42, 42, 43, 43, 44, 45, 45, 46, 46, 47, 47, 48, 49, 49, 50, 50, 51, 52, 52, 53, 53, 54, 54, 55, 56, 56, 57, 57, 58, 58, 59, 60, 60, 61, 61, 62, 63, 63, 64, 64, 65, 65, 66, 67, 67, 68, 68, 69, 69, 70, 71, 71, 72, 72, 73, 74, 74, 75, 75, 76, 76, 77, 78, 78, 79, 79, 80, 80, 81, 82, 82, 83, 83, 84, 84, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 91, 92, 93, 93, 94, 94, 95, 95, 96, 97, 97, 98, 98, 99, 100, 100, 101, 101, 102, 102, 103, 104, 104, 105, 105, 106, 106, 107, 108, 108, 109, 109, 110, 111, 111, 112, 112, 113, 113, 114, 115, 115, 116, 116, 117, 117, 118, 119, 119, 120, 120, 121, 121, 122, 123, 123, 124, 124, 125, 126, 126, 127, 127, 128, 128, 129, 130, 130, 131, 131, 132, 132, 133, 134, 134, 135, 135, 136, 137, 137, 138, 138, 139, 139, 140, 141, 141, 142, 142, 143, 143, 144, 145, 145, 146, 146, 148 };
			std::vector<unsigned char> gs{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 32 };
			std::vector<unsigned char> bs{ 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 28, 28, 29, 30, 30, 31, 31, 32, 32, 33, 34, 34, 35, 35, 36, 37, 37, 38, 38, 39, 39, 40, 41, 41, 42, 42, 43, 43, 44, 45, 45, 46, 46, 47, 47, 48, 49, 49, 50, 50, 51, 52, 52, 53, 53, 54, 54, 55, 56, 56, 57, 57, 58, 58, 59, 60, 60, 61, 61, 62, 63, 63, 64, 64, 65, 65, 66, 67, 67, 68, 68, 69, 69, 70, 71, 71, 72, 72, 73, 74, 74, 75, 75, 76, 76, 77, 78, 78, 79, 79, 80, 80, 81, 82, 82, 83, 83, 84, 84, 85, 86, 86, 87, 87, 88, 89, 89, 90, 90, 91, 91, 92, 93, 93, 94, 94, 95, 95, 96, 97, 97, 98, 98, 99, 100, 100, 101, 101, 102, 102, 103, 104, 104, 105, 105, 106, 106, 107, 108, 108, 109, 109, 110, 111, 111, 112, 112, 113, 113, 114, 115, 115, 116, 116, 117, 117, 118, 119, 119, 120, 120, 121, 121, 122, 123, 123, 124, 124, 125, 126, 126, 127, 127, 128, 128, 129, 130, 130, 131, 131, 132, 132, 133, 134, 134, 135, 135, 136, 137, 137, 138, 138, 139, 139, 140, 141, 141, 142, 142, 143, 143, 144, 145, 145, 146, 146, 148 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("I Blue")) {
			std::vector<unsigned char> rs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			std::vector<unsigned char> gs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			std::vector<unsigned char> bs{};
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("I Bordeaux")) {
			std::vector<unsigned char> rs{ 255, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 249, 249, 249, 249, 249, 248, 248, 248, 248, 248, 247, 247, 247, 247, 247, 246, 246, 246, 246, 246, 245, 245, 245, 245, 245, 244, 244, 244, 244, 244, 243, 243, 243, 243, 243, 242, 242, 242, 242, 242, 241, 241, 241, 241, 241, 240, 240, 240, 240, 240, 239, 239, 239, 239, 239, 238, 238, 238, 238, 238, 237, 237, 237, 237, 237, 236, 236, 236, 236, 236, 235, 235, 235, 235, 235, 234, 234, 234, 234, 234, 233, 233, 233, 233, 233, 232, 232, 232, 232, 232, 231, 231, 231, 231, 231, 230, 230, 230, 230, 230, 229, 229, 229, 229, 229, 228, 228, 228, 228, 228, 227, 227, 227, 227, 227, 226, 226, 226, 226, 226, 225, 225, 225, 225, 225, 224, 224, 224, 224, 224, 223, 223, 223, 223, 223, 222, 222, 222, 222, 222, 221, 221, 221, 221, 221, 220, 220, 220, 220, 220, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 217, 217, 217, 217, 217, 216, 216, 216, 216, 216, 215, 215, 215, 215, 215, 214, 214, 214, 214, 214, 213, 213, 213, 213, 213, 212, 212, 212, 212, 212, 211, 211, 211, 211, 211, 210, 210, 210, 210, 210, 209, 209, 209, 209, 209, 208, 208, 208, 208, 208, 207, 207, 207, 207, 207, 206, 206, 206, 206, 206, 205, 205, 205, 205, 205, 204, 204, 204, 204, 204 };
			std::vector<unsigned char> gs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			std::vector<unsigned char> bs{ 255, 254, 253, 252, 251, 251, 250, 249, 248, 247, 247, 246, 245, 244, 243, 243, 242, 241, 240, 239, 239, 238, 237, 236, 235, 235, 234, 233, 232, 231, 231, 230, 229, 228, 227, 227, 226, 225, 224, 223, 223, 222, 221, 220, 219, 219, 218, 217, 216, 215, 215, 214, 213, 212, 211, 211, 210, 209, 208, 207, 207, 206, 205, 204, 204, 203, 202, 201, 200, 200, 199, 198, 197, 196, 196, 195, 194, 193, 192, 192, 191, 190, 189, 188, 188, 187, 186, 185, 184, 184, 183, 182, 181, 180, 180, 179, 178, 177, 176, 176, 175, 174, 173, 172, 172, 171, 170, 169, 168, 168, 167, 166, 165, 164, 164, 163, 162, 161, 160, 160, 159, 158, 157, 156, 156, 155, 154, 153, 153, 152, 151, 150, 149, 149, 148, 147, 146, 145, 145, 144, 143, 142, 141, 141, 140, 139, 138, 137, 137, 136, 135, 134, 133, 133, 132, 131, 130, 129, 129, 128, 127, 126, 125, 125, 124, 123, 122, 121, 121, 120, 119, 118, 117, 117, 116, 115, 114, 113, 113, 112, 111, 110, 109, 109, 108, 107, 106, 105, 105, 104, 103, 102, 102, 101, 100, 99, 98, 98, 97, 96, 95, 94, 94, 93, 92, 91, 90, 90, 89, 88, 87, 86, 86, 85, 84, 83, 82, 82, 81, 80, 79, 78, 78, 77, 76, 75, 74, 74, 73, 72, 71, 70, 70, 69, 68, 67, 66, 66, 65, 64, 63, 62, 62, 61, 60, 59, 58, 58, 57, 56, 55, 54, 54, 53, 52, 51 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("I Cyan")) {
			std::vector<unsigned char> rs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			std::vector<unsigned char> gs{};
			std::vector<unsigned char> bs{};
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("I Forest")) {
			std::vector<unsigned char> rs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			std::vector<unsigned char> gs{ 255, 254, 254, 253, 253, 253, 252, 252, 251, 251, 251, 250, 250, 249, 249, 249, 248, 248, 247, 247, 247, 246, 246, 245, 245, 245, 244, 244, 243, 243, 243, 242, 242, 241, 241, 241, 240, 240, 239, 239, 239, 238, 238, 237, 237, 237, 236, 236, 235, 235, 235, 234, 234, 233, 233, 233, 232, 232, 231, 231, 231, 230, 230, 229, 229, 229, 228, 228, 227, 227, 227, 226, 226, 225, 225, 225, 224, 224, 223, 223, 223, 222, 222, 221, 221, 221, 220, 220, 219, 219, 219, 218, 218, 217, 217, 217, 216, 216, 215, 215, 215, 214, 214, 213, 213, 213, 212, 212, 211, 211, 211, 210, 210, 209, 209, 209, 208, 208, 207, 207, 207, 206, 206, 205, 205, 205, 204, 204, 204, 203, 203, 202, 202, 202, 201, 201, 200, 200, 200, 199, 199, 198, 198, 198, 197, 197, 196, 196, 196, 195, 195, 194, 194, 194, 193, 193, 192, 192, 192, 191, 191, 190, 190, 190, 189, 189, 188, 188, 188, 187, 187, 186, 186, 186, 185, 185, 184, 184, 184, 183, 183, 182, 182, 182, 181, 181, 180, 180, 180, 179, 179, 178, 178, 178, 177, 177, 176, 176, 176, 175, 175, 174, 174, 174, 173, 173, 172, 172, 172, 171, 171, 170, 170, 170, 169, 169, 168, 168, 168, 167, 167, 166, 166, 166, 165, 165, 164, 164, 164, 163, 163, 162, 162, 162, 161, 161, 160, 160, 160, 159, 159, 158, 158, 158, 157, 157, 156, 156, 156, 155, 155, 154, 154, 154, 153, 153 };
			std::vector<unsigned char> bs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("I Green")) {
			std::vector<unsigned char> rs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			std::vector<unsigned char> gs{};
			std::vector<unsigned char> bs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("I Magenta")) {
			std::vector<unsigned char> rs{};
			std::vector<unsigned char> gs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			std::vector<unsigned char> bs{};
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("I Purple")) {
			std::vector<unsigned char> rs{ 255, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 249, 249, 249, 249, 249, 248, 248, 248, 248, 248, 247, 247, 247, 247, 247, 246, 246, 246, 246, 246, 245, 245, 245, 245, 245, 244, 244, 244, 244, 244, 243, 243, 243, 243, 243, 242, 242, 242, 242, 242, 241, 241, 241, 241, 241, 240, 240, 240, 240, 240, 239, 239, 239, 239, 239, 238, 238, 238, 238, 238, 237, 237, 237, 237, 237, 236, 236, 236, 236, 236, 235, 235, 235, 235, 235, 234, 234, 234, 234, 234, 233, 233, 233, 233, 233, 232, 232, 232, 232, 232, 231, 231, 231, 231, 231, 230, 230, 230, 230, 230, 229, 229, 229, 229, 229, 228, 228, 228, 228, 228, 227, 227, 227, 227, 227, 226, 226, 226, 226, 226, 225, 225, 225, 225, 225, 224, 224, 224, 224, 224, 223, 223, 223, 223, 223, 222, 222, 222, 222, 222, 221, 221, 221, 221, 221, 220, 220, 220, 220, 220, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 217, 217, 217, 217, 217, 216, 216, 216, 216, 216, 215, 215, 215, 215, 215, 214, 214, 214, 214, 214, 213, 213, 213, 213, 213, 212, 212, 212, 212, 212, 211, 211, 211, 211, 211, 210, 210, 210, 210, 210, 209, 209, 209, 209, 209, 208, 208, 208, 208, 208, 207, 207, 207, 207, 207, 206, 206, 206, 206, 206, 205, 205, 205, 205, 205, 204, 204, 204, 204, 204 };
			std::vector<unsigned char> gs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			std::vector<unsigned char> bs{ 255, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 249, 249, 249, 249, 249, 248, 248, 248, 248, 248, 247, 247, 247, 247, 247, 246, 246, 246, 246, 246, 245, 245, 245, 245, 245, 244, 244, 244, 244, 244, 243, 243, 243, 243, 243, 242, 242, 242, 242, 242, 241, 241, 241, 241, 241, 240, 240, 240, 240, 240, 239, 239, 239, 239, 239, 238, 238, 238, 238, 238, 237, 237, 237, 237, 237, 236, 236, 236, 236, 236, 235, 235, 235, 235, 235, 234, 234, 234, 234, 234, 233, 233, 233, 233, 233, 232, 232, 232, 232, 232, 231, 231, 231, 231, 231, 230, 230, 230, 230, 230, 229, 229, 229, 229, 229, 228, 228, 228, 228, 228, 227, 227, 227, 227, 227, 226, 226, 226, 226, 226, 225, 225, 225, 225, 225, 224, 224, 224, 224, 224, 223, 223, 223, 223, 223, 222, 222, 222, 222, 222, 221, 221, 221, 221, 221, 220, 220, 220, 220, 220, 219, 219, 219, 219, 219, 218, 218, 218, 218, 218, 217, 217, 217, 217, 217, 216, 216, 216, 216, 216, 215, 215, 215, 215, 215, 214, 214, 214, 214, 214, 213, 213, 213, 213, 213, 212, 212, 212, 212, 212, 211, 211, 211, 211, 211, 210, 210, 210, 210, 210, 209, 209, 209, 209, 209, 208, 208, 208, 208, 208, 207, 207, 207, 207, 207, 206, 206, 206, 206, 206, 205, 205, 205, 205, 205, 204, 204, 204, 204, 204 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("I Red")) {
			std::vector<unsigned char> rs{};
			std::vector<unsigned char> gs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			std::vector<unsigned char> bs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("I Yellow")) {
			std::vector<unsigned char> rs{};
			std::vector<unsigned char> gs{};
			std::vector<unsigned char> bs{ 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("OPF fresh")) {
			std::vector<unsigned char> rs{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			std::vector<unsigned char> gs{ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255 };
			std::vector<unsigned char> bs{ 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 117 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("OPF orange")) {
			std::vector<unsigned char> rs{ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255 };
			std::vector<unsigned char> gs{ 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 117 };
			std::vector<unsigned char> bs{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("OPF purple")) {
			std::vector<unsigned char> rs{ 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 117 };
			std::vector<unsigned char> gs{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			std::vector<unsigned char> bs{ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255 };
			return Palette(rs, gs, bs, _lut);
		}
		else if (_lut == std::string("Turbo")) {
			std::vector<unsigned char> rs{ 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 65, 66, 66, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 70, 70, 70, 70, 70, 69, 69, 68, 67, 66, 65, 64, 62, 61, 59, 58, 56, 55, 53, 51, 49, 47, 46, 44, 42, 40, 39, 37, 35, 34, 32, 31, 30, 28, 27, 26, 26, 25, 24, 24, 24, 24, 24, 24, 25, 25, 26, 28, 29, 31, 32, 34, 37, 39, 42, 44, 47, 50, 53, 56, 60, 63, 67, 70, 74, 78, 82, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 128, 132, 136, 139, 143, 146, 150, 153, 156, 159, 161, 164, 167, 169, 172, 175, 177, 180, 183, 185, 188, 190, 193, 195, 198, 200, 203, 205, 208, 210, 212, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 236, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 251, 252, 252, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 252, 252, 251, 251, 250, 249, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 237, 236, 235, 234, 232, 231, 229, 228, 226, 225, 223, 221, 220, 218, 216, 214, 212, 210, 208, 206, 204, 202, 200, 197, 195, 193, 190, 188, 185, 183, 180, 178, 175, 172, 169, 167, 164, 161, 158, 155, 152, 149, 146, 142, 139, 136, 133, 129, 126, 122 };
			std::vector<unsigned char> gs{ 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 47, 50, 53, 56, 59, 62, 64, 67, 70, 73, 75, 78, 81, 84, 86, 89, 92, 94, 97, 100, 102, 105, 107, 110, 113, 115, 118, 120, 123, 125, 128, 130, 133, 135, 138, 140, 143, 145, 148, 150, 153, 155, 158, 160, 163, 165, 168, 171, 173, 175, 178, 180, 183, 185, 188, 190, 192, 195, 197, 199, 201, 203, 205, 208, 210, 212, 213, 215, 217, 219, 221, 222, 224, 226, 227, 228, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 253, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 253, 253, 252, 252, 251, 251, 250, 249, 248, 247, 246, 245, 244, 243, 241, 240, 239, 237, 236, 234, 233, 231, 229, 228, 226, 224, 223, 221, 219, 217, 215, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 193, 190, 188, 186, 184, 182, 179, 177, 174, 172, 169, 167, 164, 161, 158, 155, 153, 150, 147, 144, 141, 138, 135, 132, 129, 126, 123, 120, 117, 114, 111, 108, 105, 102, 99, 96, 93, 91, 88, 85, 83, 80, 78, 75, 73, 71, 69, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 42, 40, 38, 37, 35, 33, 32, 30, 29, 27, 26, 24, 23, 22, 20, 19, 18, 16, 15, 14, 13, 11, 10, 9, 8, 7, 6, 5, 4 };
			std::vector<unsigned char> bs{ 59, 67, 74, 81, 88, 95, 102, 109, 115, 121, 128, 134, 139, 145, 151, 156, 162, 167, 172, 177, 181, 186, 191, 195, 199, 203, 207, 211, 214, 218, 221, 224, 227, 230, 233, 235, 238, 240, 242, 244, 246, 248, 250, 251, 252, 253, 254, 254, 255, 255, 255, 254, 254, 253, 252, 251, 250, 248, 247, 245, 244, 242, 240, 238, 235, 233, 231, 228, 226, 223, 221, 218, 216, 213, 210, 208, 205, 202, 200, 197, 194, 192, 189, 187, 185, 182, 180, 178, 175, 172, 170, 167, 164, 161, 158, 155, 152, 148, 145, 142, 138, 135, 132, 128, 125, 122, 118, 115, 111, 108, 105, 102, 98, 95, 92, 89, 86, 83, 81, 78, 75, 73, 71, 68, 66, 64, 63, 61, 60, 58, 57, 56, 55, 54, 54, 53, 53, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 54, 54, 55, 55, 55, 56, 56, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 57, 57, 57, 56, 55, 54, 54, 53, 52, 51, 50, 49, 48, 47, 45, 44, 43, 42, 41, 39, 38, 37, 35, 34, 33, 31, 30, 29, 28, 26, 25, 24, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 12, 11, 10, 10, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3 };
			return Palette(rs, gs, bs, _lut);
		}

		return Palette();
	}

	Palette* Palette::getStaticLutPtr(const std::string& _lut)
	{
		if (_lut == std::string("Gray")) {
			return new Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 255, 255, 255), _lut);
		}
		else if (_lut == std::string("Red")) {
			return new Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 0, 0, 255), _lut);
		}
		else if (_lut == std::string("Green")) {
			return new Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 255, 0, 255), _lut);
		}
		else if (_lut == std::string("Blue")) {
			return new Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 0, 255, 255), _lut);
		}
		else if (_lut == std::string("AllGray")) {
			return new Palette(Color4uc(125, 125, 125, 255), Color4uc(125, 125, 125, 255), _lut);
		}
		else if (_lut == std::string("AllYellow")) {
			return new Palette(Color4uc(255, 255, 0, 255), Color4uc(255, 255, 0, 255), _lut);
		}
		else if (_lut == std::string("AllRedColorBlind")) {
			return new Palette(Color4uc(128, 0, 128, 255), Color4uc(128, 0, 128, 255), _lut);
		}
		else if (_lut == std::string("AllGreenColorBlind")) {
			return new Palette(Color4uc(0, 200, 0, 255), Color4uc(0, 200, 0, 255), _lut);
		}
		else if (_lut == std::string("Fire")) {
			int r[] = { 0,0,1,25,49,73,98,122,146,162,173,184,195,207,217,229,240,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255 };
			int g[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,14,35,57,79,101,117,133,147,161,175,190,205,219,234,248,255,255,255,255 };
			int b[] = { 0,61,96,130,165,192,220,227,210,181,151,122,93,64,35,5,0,0,0,0,0,0,0,0,0,0,0,35,98,160,223,255 };
			int w = 32;
			std::vector < Color4uc > colors;
			for (int i = 1; i < w - 1; i++)
				colors.push_back(Color4uc(r[i], g[i], b[i], 255));
			Palette* palette = new Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 255, 255, 255), _lut);
			float step = 1.f / 32.f;
			float cur = step;
			for (unsigned int i = 0; i < colors.size(); i++, cur += step)
				palette->setColor(cur, colors[i]);
			return palette;
		}
		else if (_lut == std::string("InvFire")) {
			int r[] = { 0,0,1,25,49,73,98,122,146,162,173,184,195,207,217,229,240,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255 };
			int g[] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,14,35,57,79,101,117,133,147,161,175,190,205,219,234,248,255,255,255,255 };
			int b[] = { 0,61,96,130,165,192,220,227,210,181,151,122,93,64,35,5,0,0,0,0,0,0,0,0,0,0,0,35,98,160,223,255 };
			int w = 32;
			std::vector < Color4uc > colors;
			for (int i = w - 2; i >= 0; i--)
				colors.push_back(Color4uc(r[i], g[i], b[i], 255));
			Palette* palette = new Palette(Color4uc(255, 255, 255, 255), Color4uc(0, 0, 0, 255), _lut);
			float step = 1.f / 32.f;
			float cur = step;
			for (unsigned int i = 0; i < colors.size(); i++, cur += step)
				palette->setColor(cur, colors[i]);
			return palette;
		}
		else if (_lut == std::string("Ice")) {
			int r[] = { 0,0,0,0,0,0,19,29,50,48,79,112,134,158,186,201,217,229,242,250,250,250,250,251,250,250,250,250,251,251,243,230 };
			int g[] = { 156,165,176,184,190,196,193,184,171,162,146,125,107,93,81,87,92,97,95,93,93,90,85,69,64,54,47,35,19,0,4,0 };
			int b[] = { 140,147,158,166,170,176,209,220,234,225,236,246,250,251,250,250,245,230,230,222,202,180,163,142,123,114,106,94,84,64,26,27 };
			int w = 32;
			std::vector < Color4uc > colors;
			for (int i = 1; i < w - 1; i++)
				colors.push_back(Color4uc(r[i], g[i], b[i], 255));
			Palette* palette = new Palette(Color4uc(0, 0, 0, 255), Color4uc(255, 255, 255, 255), _lut);
			float step = 1.f / 32.f;
			float cur = step;
			for (unsigned int i = 0; i < colors.size(); i++, cur += step)
				palette->setColor(cur, colors[i]);
			return palette;
		}
		else if (_lut == std::string("AllBlue")) {
			return new Palette(Color4uc(0, 85, 255, 255), Color4uc(0, 85, 255, 255), _lut);
		}
		else if (_lut == std::string("AllGreen")) {
			return new Palette(Color4uc(0, 170, 127, 255), Color4uc(0, 170, 127, 255), _lut);
		}
		else if (_lut == std::string("AllRed")) {
			return new Palette(Color4uc(255, 0, 0, 255), Color4uc(255, 0, 0, 255), _lut);
		}
		else if (_lut == std::string("AllOrange")) {
			return new Palette(Color4uc(255, 165, 0, 255), Color4uc(255, 165, 0, 255), _lut);
		}
		else if (_lut == std::string("AllTomato")) {
			return new Palette(Color4uc(255, 69, 0, 255), Color4uc(255, 69, 0, 255), _lut);
		}
		else if (_lut == std::string("AllCyan")) {
			return new Palette(Color4uc(0, 255, 255, 255), Color4uc(0, 255, 255, 255), _lut);
		}
		else if (_lut == std::string("AllTurquoise")) {
			return new Palette(Color4uc(64, 224, 208, 255), Color4uc(64, 224, 208, 255), _lut);
		}
		else if (_lut == std::string("AllWhite")) {
			return new Palette(Color4uc(255, 255, 255, 255), Color4uc(255, 255, 255, 255), _lut);
		}
		else if (_lut == std::string("AllBlack")) {
			return new Palette(Color4uc(0, 0, 0, 255), Color4uc(0, 0, 0, 255), _lut);
		}
		else if (_lut == std::string("HotCold")) {
			Palette* palette = new Palette(Color4uc(0, 0, 255, 255), Color4uc(170, 0, 255, 255), _lut);
			palette->setColor(0.1f, Color4uc(0, 170, 255, 255));
			palette->setColor(0.225f, Color4uc(103, 255, 139, 255));
			palette->setColor(0.35f, Color4uc(255, 255, 0, 255));
			palette->setColor(0.5f, Color4uc(255, 170, 0, 255));
			palette->setColor(0.7f, Color4uc(255, 0, 0, 255));
			return palette;
		}
		else if (_lut == std::string("HotCold2")) {
			Palette* palette = new Palette(Color4uc(0, 0, 255, 255), Color4uc(170, 0, 255, 255), _lut);
			palette->setColor(0.16f, Color4uc(0, 170, 255, 255));
			palette->setColor(0.33f, Color4uc(103, 255, 139, 255));
			palette->setColor(0.49f, Color4uc(255, 255, 0, 255));
			palette->setColor(0.66f, Color4uc(255, 170, 0, 255));
			palette->setColor(0.82f, Color4uc(255, 0, 0, 255));
			return palette;
		}
		else if (_lut == std::string("HiLow")) {
			Palette* palette = new Palette(Color4uc(128, 0, 128, 255), Color4uc(0, 200, 0, 255), _lut, true);
			palette->setColor(0.499, Color4uc(128, 0, 128, 255));
			palette->setColor(0.501, Color4uc(0, 200, 0, 255));
			return palette;
		}
		else if (_lut == std::string("Heatmap")) {
			Palette* palette = new Palette(Color4uc(33, 102, 172, 0), Color4uc(178, 24, 43, 255), _lut);
			palette->setColor(0.2f, Color4uc(103, 169, 207, 255));
			palette->setColor(0.4f, Color4uc(209, 229, 240, 255));
			palette->setColor(0.6f, Color4uc(253, 219, 199, 255));
			palette->setColor(0.8f, Color4uc(239, 138, 98, 255));
			return palette;
		}
		else if (_lut == std::string("HiLo")) {
			Palette* palette = new Palette(Color4uc(128, 0, 128, 255), Color4uc(0, 200, 0, 255), _lut);
			palette->setHiLow(true);
			return palette;
		}
		else if (_lut == std::string("Random")) {
			Palette* palette = new Palette(randomColorB(), randomColorB(), _lut);
			float step = 0.0000001f;
			for (float cur = step; cur < 1.f; cur += step)
				palette->setColor(cur, randomColorB());
			return palette;
		}
		return NULL;
	}

	PaletteInterface* Palette::copy() const
	{
		Palette* palette = new Palette(*this);
		return palette;
	}

	void Palette::copy(Palette* _palette)
	{
		this->m_gradient = _palette->m_gradient;
		this->m_begin = _palette->m_begin;
		this->m_end = _palette->m_end;
		this->m_from = _palette->m_from;
		this->m_to = _palette->m_to;
	}

	const Color4uc Palette::getColorLUT(const float _pos) const
	{
		if (m_hilow) {
			Color4uc c1(128, 0, 128, 255), c2(0, 200, 0, 255);
			return _pos < .5f ? c2 : c1;
		}
		else {
			std::set <std::pair<float, Color4uc>>::iterator it = m_gradient.begin(), it_next = it;
			it_next++;
			for (; it_next != m_gradient.end(); it++, it_next++) {
				float pos1 = it->first, pos2 = it_next->first;
				if (pos1 == _pos)
					return it->second;
				if (pos2 == _pos)
					return it_next->second;
				if (pos1 < _pos && _pos < pos2) {
					Color4uc c2 = it->second, c1 = it_next->second;
					float segmentLength = pos2 - pos1;
					float pdist = _pos - pos1;
					float ratio = pdist / segmentLength;
					int red = (int)(ratio * c1[0] + (1 - ratio) * c2[0]);
					int green = (int)(ratio * c1[1] + (1 - ratio) * c2[1]);
					int blue = (int)(ratio * c1[2] + (1 - ratio) * c2[2]);
					int alpha = (int)(ratio * c1[3] + (1 - ratio) * c2[3]);
					return Color4uc(red, green, blue, alpha);
				}
			}
			return m_gradient.begin()->second;
		}
	}

	const Color4uc Palette::getColor(const float _pos) const
	{
		if (m_hilow) {
			Color4uc c1(128, 0, 128, 255), c2(0, 200, 0, 255);
			if (m_filterMin < _pos && _pos < m_filterMax)
				return c2;
			else
				return c1;
		}
		else {
			std::set <std::pair<float, Color4uc>>::iterator it = m_gradient.begin(), it_next = it;
			it_next++;
			for (; it_next != m_gradient.end(); it++, it_next++) {
				float pos1 = it->first, pos2 = it_next->first;
				if (pos1 == _pos)
					return it->second;
				if (pos2 == _pos)
					return it_next->second;
				if (pos1 < _pos && _pos < pos2) {
					Color4uc c2 = it->second, c1 = it_next->second;
					float segmentLength = pos2 - pos1;
					float pdist = _pos - pos1;
					float ratio = pdist / segmentLength;
					int red = (int)(ratio * c1[0] + (1 - ratio) * c2[0]);
					int green = (int)(ratio * c1[1] + (1 - ratio) * c2[1]);
					int blue = (int)(ratio * c1[2] + (1 - ratio) * c2[2]);
					int alpha = (int)(ratio * c1[3] + (1 - ratio) * c2[3]);
					return Color4uc(red, green, blue, alpha);
				}
			}
			return m_gradient.begin()->second;
		}
	}

	const Color4uc Palette::getColorNoInterpolation(const float _pos) const
	{
		if (m_hilow) {
			Color4uc c1(128, 0, 128, 255), c2(0, 200, 0, 255);
			if (m_filterMin < _pos && _pos < m_filterMax)
				return c2;
			else
				return c1;
		}
		else {
			std::set <std::pair<float, Color4uc>>::iterator it = m_gradient.begin(), it_next = it;
			it_next++;
			for (; it_next != m_gradient.end(); it++, it_next++) {
				float pos1 = it->first, pos2 = it_next->first;
				if (_pos < pos1 || _pos > pos2) continue;
				float inter = pos2 - pos1;
				if (_pos < pos1 + inter)
					return it->second;
				else
					return it_next->second;
			}
			return m_gradient.begin()->second;
		}
	}

	Palette* Palette::getMonochromePalette(const int _r, const int _g, const int _b)
	{
		return new Palette(Color4uc(_r, _g, _b, 255), Color4uc(_r, _g, _b, 255));
	}

	const unsigned int Palette::memorySize() const
	{
		unsigned int memoryS = 2 * sizeof(double);
		memoryS += 2 * sizeof(int);
		memoryS += 2 * sizeof(bool);

		return memoryS;
	}

	Color4uc Palette::getColor(const std::string& _name)
	{
		if (_name == "white")
			return Color4uc(255, 255, 255, 255);
		else if (_name == "black")
			return Color4uc(0, 0, 0, 255);
		else if (_name == "red")
			return Color4uc(255, 0, 0, 255);
		else if (_name == "blue")
			return Color4uc(255, 0, 255, 255);
		else if (_name == "green")
			return Color4uc(0, 255, 0, 255);
		else if (_name == "cyan")
			return Color4uc(0, 255, 255, 255);
		else if (_name == "magenta")
			return Color4uc(255, 0, 255, 255);
		else if (_name == "yellow")
			return Color4uc(255, 255, 0, 255);
		else if (_name == "gray")
			return Color4uc(125, 125, 125, 255);
		return Color4uc(255, 0, 0, 255);
	}
}

